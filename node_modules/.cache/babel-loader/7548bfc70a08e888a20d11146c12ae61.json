{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n/**\n * High-order component that auto-calculates column-widths for `Grid` cells.\n */\n\nvar ColumnSizer = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(ColumnSizer, _React$PureComponent);\n\n  function ColumnSizer(props, context) {\n    var _this;\n\n    _classCallCheck(this, ColumnSizer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSizer).call(this, props, context));\n    _this._registerChild = _this._registerChild.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ColumnSizer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          columnMaxWidth = _this$props.columnMaxWidth,\n          columnMinWidth = _this$props.columnMinWidth,\n          columnCount = _this$props.columnCount,\n          width = _this$props.width;\n\n      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {\n        if (this._registeredChild) {\n          this._registeredChild.recomputeGridSize();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          columnMaxWidth = _this$props2.columnMaxWidth,\n          columnMinWidth = _this$props2.columnMinWidth,\n          columnCount = _this$props2.columnCount,\n          width = _this$props2.width;\n      var safeColumnMinWidth = columnMinWidth || 1;\n      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;\n      var columnWidth = width / columnCount;\n      columnWidth = Math.max(safeColumnMinWidth, columnWidth);\n      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);\n      columnWidth = Math.floor(columnWidth);\n      var adjustedWidth = Math.min(width, columnWidth * columnCount);\n      return children({\n        adjustedWidth: adjustedWidth,\n        columnWidth: columnWidth,\n        getColumnWidth: function getColumnWidth() {\n          return columnWidth;\n        },\n        registerChild: this._registerChild\n      });\n    }\n  }, {\n    key: \"_registerChild\",\n    value: function _registerChild(child) {\n      if (child && typeof child.recomputeGridSize !== 'function') {\n        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');\n      }\n\n      this._registeredChild = child;\n\n      if (this._registeredChild) {\n        this._registeredChild.recomputeGridSize();\n      }\n    }\n  }]);\n\n  return ColumnSizer;\n}(React.PureComponent);\n\nexport { ColumnSizer as default };\nColumnSizer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Function responsible for rendering a virtualized Grid.\n   * This function should implement the following signature:\n   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element\n   *\n   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.\n   * The :registerChild should be passed to the Grid's :ref property.\n   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.\n   */\n  children: PropTypes.func.isRequired,\n\n  /** Optional maximum allowed column width */\n  columnMaxWidth: PropTypes.number,\n\n  /** Optional minimum allowed column width */\n  columnMinWidth: PropTypes.number,\n\n  /** Number of columns in Grid or Table child */\n  columnCount: PropTypes.number.isRequired,\n\n  /** Width of Grid or Table child */\n  width: PropTypes.number.isRequired\n} : {};","map":{"version":3,"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_getPrototypeOf","_assertThisInitialized","_inherits","PropTypes","React","ColumnSizer","_React$PureComponent","props","context","_this","call","_registerChild","bind","key","value","componentDidUpdate","prevProps","_this$props","columnMaxWidth","columnMinWidth","columnCount","width","_registeredChild","recomputeGridSize","render","_this$props2","children","safeColumnMinWidth","safeColumnMaxWidth","Math","min","columnWidth","max","floor","adjustedWidth","getColumnWidth","registerChild","child","Error","PureComponent","default","propTypes","process","env","NODE_ENV","func","isRequired","number"],"sources":["/Users/stoneye/react_project/circle-app-react-hook/node_modules/react-virtualized/dist/es/ColumnSizer/ColumnSizer.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n/**\n * High-order component that auto-calculates column-widths for `Grid` cells.\n */\n\nvar ColumnSizer =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(ColumnSizer, _React$PureComponent);\n\n  function ColumnSizer(props, context) {\n    var _this;\n\n    _classCallCheck(this, ColumnSizer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ColumnSizer).call(this, props, context));\n    _this._registerChild = _this._registerChild.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ColumnSizer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          columnMaxWidth = _this$props.columnMaxWidth,\n          columnMinWidth = _this$props.columnMinWidth,\n          columnCount = _this$props.columnCount,\n          width = _this$props.width;\n\n      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {\n        if (this._registeredChild) {\n          this._registeredChild.recomputeGridSize();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          columnMaxWidth = _this$props2.columnMaxWidth,\n          columnMinWidth = _this$props2.columnMinWidth,\n          columnCount = _this$props2.columnCount,\n          width = _this$props2.width;\n      var safeColumnMinWidth = columnMinWidth || 1;\n      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;\n      var columnWidth = width / columnCount;\n      columnWidth = Math.max(safeColumnMinWidth, columnWidth);\n      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);\n      columnWidth = Math.floor(columnWidth);\n      var adjustedWidth = Math.min(width, columnWidth * columnCount);\n      return children({\n        adjustedWidth: adjustedWidth,\n        columnWidth: columnWidth,\n        getColumnWidth: function getColumnWidth() {\n          return columnWidth;\n        },\n        registerChild: this._registerChild\n      });\n    }\n  }, {\n    key: \"_registerChild\",\n    value: function _registerChild(child) {\n      if (child && typeof child.recomputeGridSize !== 'function') {\n        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');\n      }\n\n      this._registeredChild = child;\n\n      if (this._registeredChild) {\n        this._registeredChild.recomputeGridSize();\n      }\n    }\n  }]);\n\n  return ColumnSizer;\n}(React.PureComponent);\n\nexport { ColumnSizer as default };\nColumnSizer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /**\n   * Function responsible for rendering a virtualized Grid.\n   * This function should implement the following signature:\n   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element\n   *\n   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.\n   * The :registerChild should be passed to the Grid's :ref property.\n   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.\n   */\n  children: PropTypes.func.isRequired,\n\n  /** Optional maximum allowed column width */\n  columnMaxWidth: PropTypes.number,\n\n  /** Optional minimum allowed column width */\n  columnMinWidth: PropTypes.number,\n\n  /** Number of columns in Grid or Table child */\n  columnCount: PropTypes.number.isRequired,\n\n  /** Width of Grid or Table child */\n  width: PropTypes.number.isRequired\n} : {};"],"mappings":"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"},"metadata":{},"sourceType":"module"}