{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport createIntervalTree from '../vendor/intervalTree'; // Position cache requirements:\n//   O(log(n)) lookup of cells to render for a given viewport size\n//   O(1) lookup of shortest measured column (so we know when to enter phase 1)\n\nvar PositionCache = /*#__PURE__*/function () {\n  function PositionCache() {\n    _classCallCheck(this, PositionCache);\n\n    _defineProperty(this, \"_columnSizeMap\", {});\n\n    _defineProperty(this, \"_intervalTree\", createIntervalTree());\n\n    _defineProperty(this, \"_leftMap\", {});\n  }\n\n  _createClass(PositionCache, [{\n    key: \"estimateTotalHeight\",\n    value: function estimateTotalHeight(cellCount, columnCount, defaultCellHeight) {\n      var unmeasuredCellCount = cellCount - this.count;\n      return this.tallestColumnSize + Math.ceil(unmeasuredCellCount / columnCount) * defaultCellHeight;\n    } // Render all cells visible within the viewport range defined.\n\n  }, {\n    key: \"range\",\n    value: function range(scrollTop, clientHeight, renderCallback) {\n      var _this = this;\n\n      this._intervalTree.queryInterval(scrollTop, scrollTop + clientHeight, function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n            top = _ref2[0],\n            _ = _ref2[1],\n            index = _ref2[2];\n\n        return renderCallback(index, _this._leftMap[index], top);\n      });\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(index, left, top, height) {\n      this._intervalTree.insert([top, top + height, index]);\n\n      this._leftMap[index] = left;\n      var columnSizeMap = this._columnSizeMap;\n      var columnHeight = columnSizeMap[left];\n\n      if (columnHeight === undefined) {\n        columnSizeMap[left] = top + height;\n      } else {\n        columnSizeMap[left] = Math.max(columnHeight, top + height);\n      }\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this._intervalTree.count;\n    }\n  }, {\n    key: \"shortestColumnSize\",\n    get: function get() {\n      var columnSizeMap = this._columnSizeMap;\n      var size = 0;\n\n      for (var i in columnSizeMap) {\n        var height = columnSizeMap[i];\n        size = size === 0 ? height : Math.min(size, height);\n      }\n\n      return size;\n    }\n  }, {\n    key: \"tallestColumnSize\",\n    get: function get() {\n      var columnSizeMap = this._columnSizeMap;\n      var size = 0;\n\n      for (var i in columnSizeMap) {\n        var height = columnSizeMap[i];\n        size = Math.max(size, height);\n      }\n\n      return size;\n    }\n  }]);\n\n  return PositionCache;\n}();\n\nexport { PositionCache as default };","map":{"version":3,"names":["_slicedToArray","_classCallCheck","_createClass","_defineProperty","createIntervalTree","PositionCache","key","value","estimateTotalHeight","cellCount","columnCount","defaultCellHeight","unmeasuredCellCount","count","tallestColumnSize","Math","ceil","range","scrollTop","clientHeight","renderCallback","_this","_intervalTree","queryInterval","_ref","_ref2","top","_","index","_leftMap","setPosition","left","height","insert","columnSizeMap","_columnSizeMap","columnHeight","undefined","max","get","size","i","min","default"],"sources":["/Users/stoneye/react_project/circle-app-react-hook/node_modules/react-virtualized/dist/es/Masonry/PositionCache.js"],"sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport createIntervalTree from '../vendor/intervalTree';\n\n// Position cache requirements:\n//   O(log(n)) lookup of cells to render for a given viewport size\n//   O(1) lookup of shortest measured column (so we know when to enter phase 1)\nvar PositionCache =\n/*#__PURE__*/\nfunction () {\n  function PositionCache() {\n    _classCallCheck(this, PositionCache);\n\n    _defineProperty(this, \"_columnSizeMap\", {});\n\n    _defineProperty(this, \"_intervalTree\", createIntervalTree());\n\n    _defineProperty(this, \"_leftMap\", {});\n  }\n\n  _createClass(PositionCache, [{\n    key: \"estimateTotalHeight\",\n    value: function estimateTotalHeight(cellCount, columnCount, defaultCellHeight) {\n      var unmeasuredCellCount = cellCount - this.count;\n      return this.tallestColumnSize + Math.ceil(unmeasuredCellCount / columnCount) * defaultCellHeight;\n    } // Render all cells visible within the viewport range defined.\n\n  }, {\n    key: \"range\",\n    value: function range(scrollTop, clientHeight, renderCallback) {\n      var _this = this;\n\n      this._intervalTree.queryInterval(scrollTop, scrollTop + clientHeight, function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 3),\n            top = _ref2[0],\n            _ = _ref2[1],\n            index = _ref2[2];\n\n        return renderCallback(index, _this._leftMap[index], top);\n      });\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(index, left, top, height) {\n      this._intervalTree.insert([top, top + height, index]);\n\n      this._leftMap[index] = left;\n      var columnSizeMap = this._columnSizeMap;\n      var columnHeight = columnSizeMap[left];\n\n      if (columnHeight === undefined) {\n        columnSizeMap[left] = top + height;\n      } else {\n        columnSizeMap[left] = Math.max(columnHeight, top + height);\n      }\n    }\n  }, {\n    key: \"count\",\n    get: function get() {\n      return this._intervalTree.count;\n    }\n  }, {\n    key: \"shortestColumnSize\",\n    get: function get() {\n      var columnSizeMap = this._columnSizeMap;\n      var size = 0;\n\n      for (var i in columnSizeMap) {\n        var height = columnSizeMap[i];\n        size = size === 0 ? height : Math.min(size, height);\n      }\n\n      return size;\n    }\n  }, {\n    key: \"tallestColumnSize\",\n    get: function get() {\n      var columnSizeMap = this._columnSizeMap;\n      var size = 0;\n\n      for (var i in columnSizeMap) {\n        var height = columnSizeMap[i];\n        size = Math.max(size, height);\n      }\n\n      return size;\n    }\n  }]);\n\n  return PositionCache;\n}();\n\nexport { PositionCache as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}